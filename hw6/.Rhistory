88.96/26.5
3.3*6+8.5*4
3.08*12+53.8
90.76/26.5
3.3*3+9.5*4
90.76+47.9
138.66/(26.5+12.5)
15/exp(0.11/12)
14.86-15
11/exp(0.11/12)
11/exp(0.11/12)-10
11/exp(0.11/12)-11
20*exp(0.11/12)
20*exp(0.11/12)-18
2.184176/4
2.184176/4-1
0.2-0.25/2
0.25/2
45/exp(0.11/12*2)
45/exp(0.11/12*2)-50
7/20*90
31.5/exp(0.11/12*2)
7/20*100
31.5/exp(0.11/12*2)-35
e^6
exp(6)
0.887*20+0.945*20
3.5*14.5+3.08*12
87.71/26.5
High<-function(price,start,end){
high<-max(price[start:end])
return(high)
}
Low<-function(price,start,end){
low<-min(price[start:end])
return(low)
}
tradestrategy<-function(tau,stp,start,end){
prevpeak<-0
prevtrough<-0
holding.money<-500000
Gain <- 0
Underwater <- 0
maxDD<-0
tradesize<-1
position<-0
for(i in (start+tau):(end-1)){
HH<-High(high.price,i-tau,i-1)
LL<-Low(low.price,i-tau,i-1)
if(position==0&&i<10000){
if(close.price[i]>HH){
trade.number <- holding.money / open.price[i+1]
holding.money <- holding.money - open.price[i+1]*trade.number
position <- 1
prevpeak<-open.price[i+1]
}
else if(close.price[i]<LL){
trade.number <- - holding.money / open.price[i+1]
holding.money<- holding.money - open.price[i+1]*trade.number
position <- -1
prevtrough <- open.price[i+1]
}
#if(i>=10000){
#}
#break;
}
else if(position==1){
if(close.price[i] > prevpeak){
prevpeak <- close.price[i]
}
if(close.price[i] < prevpeak*(1-stp)){
holding.money <- holding.money + trade.number*open.price[i+1]
position <- 0
trade.number <- 0
}
#break;
}
else if(position==-1){
if(close.price[i] < prevtrough){
prevtrough <- close.price[i]
}
if(close.price[i] > prevtrough*(1+stp)){
holding.money <- holding.money + trade.number*open.price[i+1]
position<-0
trade.number <- 0
}
}
equity <- holding.money + trade.number*close.price[i]
Gain <- max(Gain,equity-500000)
Underwater <- equity - Gain - 500000
maxDD <- min(maxDD, Underwater)
}
NWPD<-(-1)*(equity-500000)/maxDD
return(NWPD)
}
optimization <- function() {
start <- 0
length_data <- length(open.price)
while(start<length_data){
if(start + four_year <length_data) {
end = start+ four_year
}
else {
end <- length_data -1
}
best <- -500000
best_tau <- 0
best_stppct <- 0
for (tau in seq(500,10000,1000)) {
for(stppct in seq(.005,.1,.01)) {
NPWD <- tradestrategy(tau,stppct,start,end)
if (best < NPWD) {
best = NPWD
best_stppct = stppct
best_tau = tau
}
}
}
print(best_stppct)
print(best_tau)
start = start + four_year
}
}
graph = as.matrix(read.table("graph.txt", header=FALSE ))
num_node = 100
alpha = 0.2
setwd("~/Downloads")
graph = as.matrix(read.table("graph.txt", header=FALSE ))
num_node = 100
alpha = 0.2
A=matrix(0,num_node,num_node)
for (i in 1:100){
destination=graph[graph[,1]==i,]
A[destination[,2],i]=1/nrow(destination)
}
r = rep(1/num_node, num_node)
for(iter in 1:40){
one_vector = rep(1, num_node)
r = alpha / num_node * one_vector + (1 - alpha) * A %*% r
}
min_index = order(r)[1:5]
print(rbind(min_index,r[min_index]),digits = 3)
max_index = order(-r)[1:5]
print(rbind(max_index,r[max_index]), digits = 3)
x=1:400/100
y=exp(-x)
pdf("1.pdf",width=6.5,height=3)
par(mfrow=c(1,1),oma=c(1,4,1,3), mar=c(1,1,1,1),pty='s',
mgp=c(1.5,0.25,0), lwd=0.5,tck=-0.01, cex.axis=0.5, cex.lab=0.6, cex.main=0.9)
plot(x,y,xlab="x",ylab='density',type='l',axes=F)
points(c(1,2,4),exp(-c(1,2,4)),pch=20)
mtext(1, text="x",line=1,cex=0.6)
y2=2*exp(-2*x)
lines(x,y2,col=2)
points(c(1,2,4),2*exp(-2*c(1,2,4)),col='red',pch=20)
legend('topright',c('theta=1','theta=2'),lty=1,col=c('black','red'),cex=0.6)
axis(1,lwd=0.5)
axis(2,lwd=0.5)
box(lwd=0.5)
dev.off()
x=rexp(256,rate=1)
a=2
b=2
pdf("2.pdf",width=6.5,height=3)
par(mfrow=c(1,1),oma=c(1,4,1,3), mar=c(1,1,1,1),pty='s',
mgp=c(1.5,0.25,0), lwd=0.5,tck=-0.01, cex.axis=0.5, cex.lab=0.6, cex.main=0.9)
plot(0,ylab="",xlab="", type='n',xlim=c(0,4),ylim=c(0,7),axes=F )
for (n in c(4,8,16,256)){
alpha=n+a
beta=0.2+sum(x[1:n])
theta=0:400/100
lines(theta,dgamma(theta,alpha,rate=beta),type='l',col=log(n)/log(2))
}
legend('topright',c('n=4','n=8','n=16','n=256'),lty=1,col=c(log(c(4, 8,16,256))/log(2)),cex=0.6)
axis(1,lwd=0.5)
mtext(1, text="theta",cex=0.6,line = 1)
mtext(2, text="posterior density",cex=0.6,line = 1)
axis(2,lwd=0.5)
box(lwd=0.5)
abline(v=1,col='gray',lty=2,lwd=0.5)
dev.off()
graph = as.matrix(read.table("graph.txt", header=FALSE ))
num_node = 100
alpha = 0.2
A=matrix(0,num_node,num_node)
for (i in 1:100){
destination=graph[graph[,1]==i,]
A[destination[,2],i]=1/nrow(destination)
}
r = rep(1/num_node, num_node)
for(iter in 1:40){
one_vector = rep(1, num_node)
r = alpha / num_node * one_vector + (1 - alpha) * A %*% r
}
min_index = order(r)[1:5]
print(rbind(min_index,r[min_index]),digits = 3)
remin_index = order(-r)[1:5]
print(rbind(remin_index,r[remin_index]), digits = 3)
graph = as.matrix(read.table("graph.txt", header=FALSE ))
num_node = 100
alpha = 0.2
A=matrix(0,num_node,num_node)
for (i in 1:100){
destination=graph[graph[,1]==i,]
A[destination[,2],i]=1/nrow(destination)
}
r = rep(1/num_node, num_node)
for(iter in 1:40){
one_vector = rep(1, num_node)
r = alpha / num_node * one_vector + (1 - alpha) * A %*% r
}
top_index = order(r)[1:5]
print(rbind(top_index,r[top_index]),digits = 3)
bottom_index = order(-r)[1:5]
print(rbind(bottom_index,r[bottom_index]), digits = 3)
curve(exp(-x), from=0, to=4)
curve(exp(-x), from=0, to=4) points(1, exp(-1), pch=1) points(2, exp(-2), pch=1) points(4, exp(-4), pch=1)
curve(exp(-x), from=0, to=4)
points(1, exp(-1), pch=1)
points(2, exp(-2), pch=1)
points(4, exp(-4), pch=1)
curve(exp(-x), from=0, to=4)
curve(2*exp(-2*x), from=0, to=4, add=T, col='red')
points(1, exp(-1), pch=1); points(1, 2*exp(-2), pch=2, col='red');
points(2, exp(-2), pch=1); points(2, 2*exp(-4), pch=2, col='red');
points(4, exp(-4), pch=1); points(4, 2*exp(-8), pch=2, col='red');
legend("topright",legend=c('theta=1','theta=2'), lty=1, col=c(1,2))
x <- rexp(256,rate=1) a <- 2
b <- 0.2
plot(0,ylab="Post density",xlab="theta", type='n',xlim=c(0,4),ylim=c(0,7),axes=F )
x <- rexp(256,rate=1)
a <- 2
b <- 0.2
plot(0,ylab="Post density",xlab="theta", type='n',xlim=c(0,4),ylim=c(0,7),axes=F )
for (n in c(4,8,16,256)){
alpha=n+a
beta=0.2+sum(x[1:n])
theta=0:400/100 lines(theta,dgamma(theta,alpha,rate=beta),type='l',col=log2(n))
} legend('topright',c('n=4','n=8','n=16','n=256'),lty=1,col=log2(c(4,8,16,256)),cex=0.6)
x <- rexp(256,rate=1)
a <- 2
b <- 0.2
plot(0,ylab="Post density",xlab="theta", type='n',xlim=c(0,4),ylim=c(0,7),axes=F )
for (n in c(4,8,16,256)){
alpha=n+a
beta=0.2+sum(x[1:n])
theta=0:400/100
lines(theta,dgamma(theta,alpha,rate=beta),type='l',col=log2(n))
} legend('topright',c('n=4','n=8','n=16','n=256'),lty=1,col=log2(c(4,8,16,256)),cex=0.6)
x <- rexp(256,rate=1)
a <- 2
b <- 0.2
plot(0,ylab="Post density",xlab="theta", type='n',xlim=c(0,4),ylim=c(0,7),axes=F )
for (n in c(4,8,16,256)){
alpha=n+a
beta=0.2+sum(x[1:n])
theta=0:400/100
lines(theta,dgamma(theta,alpha,rate=beta),type='l',col=log2(n))
}
legend('topright',c('n=4','n=8','n=16','n=256'),lty=1,col=log2(c(4,8,16,256)),cex=0.6)
x <- read.table("features.txt", header=F, sep=',')
setwd("~/Desktop/2017 spring/GR 5241/HW/hw6")
x <- read.table("features.txt", header=F, sep=',')
x <- read.table("features.txt", header=F, sep=',')
setwd("~/Desktop/2017 spring/GR 5241/HW/hw6")
x <- read.table("features.txt", header=F, sep=',')
y <- read.table("target.txt",   header=F)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw6")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw6")
x <- read.table("features.txt", header=F, sep=',')
y <- read.table("target.txt",   header=F)
x <- as.matrix(x)
y <- as.matrix(y)
d <- ncol(x); n <- nrow(x)
Costfunc <- function(w,b){
w2 <- sum(w*w)
wx <- 0
for (i in 1:n)
wx <- wx + max(0, 1-y[i]*(sum(w*x[i,])+b))
return(as.numeric(0.5*w2+100*wx))
}
Costfunc_dwj <- function(w,b,j){
s <- 0
for (i in 1:n)
s <- s-y[i]*x[i,j]* (y[i]*(t(x[i,]) %*% w +b)<1)
return(as.numeric(w[j]+100*s))
}
Costfunc_db <- function(w,b){
s <- 0
for (i in 1:n)
s <- s-y[i]* (y[i]*(t(x[i,]) %*% w +b)<1)
return(as.numeric(100*s))
}
w0 <- rep(0,d)
w1 <- rep(0,d)
b0 <- 0
cpc <- 1
CostFunc_Sery    <- rep(0,2000)
CostFunc_Sery[1] <- Costfunc(w0,b0)
L_speed <- 0.0000003
err  <- 0.25
k <- 1
tstart <- Sys.time()
while (cpc>=err){
for (j in 1:d)
w1[j] <- w0[j] - L_speed * Costfunc_dwj(w0,b0,j)
b1 <- b0 - L_speed * Costfunc_db(w0,b0)
k <- k+1
CostFunc_Sery[k] <- Costfunc(w1,b1)
cpc <- abs(CostFunc_Sery[k-1]-CostFunc_Sery[k])*100/CostFunc_Sery[k-1]
w0 <- w1; b0 <- b1
}
tend <- Sys.time()
running <- tend-tstart
print(running)
Costfunc_dwj_i <- function(w,b,j,i){
if (y[i]*(t(x[i,]) %*% w +b)<1)
return(as.numeric(w[j]+100*(-y[i]*x[i,j])))
return(as.numeric(w[j]))
}
Costfunc_db_i <- function(w,b,i){
if (y[i]*(t(x[i,]) %*% w +b)<1)
return(as.numeric(100*-y[i]))
return(0)
}
w0 <- rep(0,d)
w1 <- rep(0,d)
b0 <- 0
cpc <- 0
START <- TRUE
CostFunc_Sery2 <- rep(0,2000)
CostFunc_Sery2[1] <- Costfunc(w0,b0)
L_speed <- 0.0001
err  <- 0.001
k <- 1; i <- 1
tstart<-Sys.time()
while ((cpc>=err)|(START)){
START <- FALSE
for (j in 1:d)
w1[j] <- w0[j] - L_speed * Costfunc_dwj_i(w0,b0,j,i)
b1 <- b0 - L_speed * Costfunc_db_i(w0,b0,i)
i <- i%%n+1
k <- k+1
CostFunc_Sery2[k] <- Costfunc(w1,b1)
cpc <- 0.5*cpc+0.5*abs(CostFunc_Sery2[k-1]-CostFunc_Sery2[k])*100/CostFunc_Sery2[k-1]
w0 <- w1; b0 <- b1
}
tend<-Sys.time()
running <- tend-tstart
print(running)
T2 <- k;
x1=0:(T1-1); y1=CostFunc_Sery[1:T1];
x2=0:(T2-1); y2=CostFunc_Sery2[1:T2];
x3=0:(T3-1); y3=CostFunc_Sery3[1:T3];
plot(x1, y1, lty=1, type='l',
xlab="iteration times", ylab="f(w,b)",
main="Different grandient descent method",
xlim=c(0,1000), ylim=c(230000,600000))
points(x2, y2, type='l', lty=2)
points(x3, y3, type='l', lty=3)
legend("topright",legend=c("Batch grandient descent","Stochastic grandient descent","Mini batch grandient descent"), lty=1:3)
Costfunc_dwj_l <- function(w,b,j,l){
s <- 0
for (i in (l*batch_size+1):min(n,(l+1)*batch_size))
s <- s-y[i]*x[i,j]* (y[i]*(t(x[i,]) %*% w +b)<1)
return(as.numeric(w[j]+100*s))
}
Costfunc_db_l <- function(w,b,l){
s <- 0
for (i in (l*batch_size+1):min(n,(l+1)*batch_size))
s <- s-y[i]* (y[i]*(t(x[i,]) %*% w +b)<1)
return(as.numeric(100*s))
}
w0 <- rep(0,d)
w1 <- rep(0,d)
b0 <- 0
cpc <- 0
START <- TRUE
CostFunc_Sery3 <- rep(0,1000000)
CostFunc_Sery3[1] <- Costfunc(w0,b0)
L_speed <- 0.00001
err  <- 0.01
batch_size <- 20
k <- 1; l <- 0
tstart<-Sys.time()
while ((cpc>=err)|(START)){
START=FALSE
for (j in 1:d)
w1[j] <- w0[j] - L_speed * Costfunc_dwj_l(w0,b0,j,l)
b1 <- b0 - L_speed * Costfunc_db_l(w0,b0,l)
l <- (l+1)  %% floor((n-1+batch_size)/batch_size)
k <- k+1
CostFunc_Sery3[k] <- Costfunc(w1,b1)
cpc <- 0.5*cpc+0.5*abs(CostFunc_Sery3[k-1]-CostFunc_Sery3[k])*100/CostFunc_Sery3[k-1]
w0 <- w1; b0 <- b1
cat(k,' ',CostFunc_Sery3[k],' ',cpc,'\n')
}
tend<-Sys.time()
running <- tend-tstart
print(running)
T3 <- k;
x1=0:(T1-1); y1=CostFunc_Sery[1:T1];
x2=0:(T2-1); y2=CostFunc_Sery2[1:T2];
x1=0:(T1-1); y1=CostFunc_Sery[1:T1];
T1 <- k
x1=0:(T1-1); y1=CostFunc_Sery[1:T1];
x2=0:(T2-1); y2=CostFunc_Sery2[1:T2];
x3=0:(T3-1); y3=CostFunc_Sery3[1:T3];
plot(x1, y1, lty=1, type='l',
xlab="iteration times", ylab="f(w,b)",
main="Different grandient descent method",
xlim=c(0,1000), ylim=c(230000,600000))
points(x2, y2, type='l', lty=2)
points(x3, y3, type='l', lty=3)
legend("topright",legend=c("Batch grandient descent","Stochastic grandient descent","Mini batch grandient descent"), lty=1:3)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw6")
x <- read.table("features.txt", header=F, sep=',')
y <- read.table("target.txt",   header=F)
x <- as.matrix(x)
y <- as.matrix(y)
d <- ncol(x); n <- nrow(x)
Costfunc <- function(w,b){
w2 <- sum(w*w)
wx <- 0
for (i in 1:n)
wx <- wx + max(0, 1-y[i]*(sum(w*x[i,])+b))
return(as.numeric(0.5*w2+100*wx))
}
Costfunc_dwj <- function(w,b,j){
s <- 0
for (i in 1:n)
s <- s-y[i]*x[i,j]* (y[i]*(t(x[i,]) %*% w +b)<1)
return(as.numeric(w[j]+100*s))
}
Costfunc_db <- function(w,b){
s <- 0
for (i in 1:n)
s <- s-y[i]* (y[i]*(t(x[i,]) %*% w +b)<1)
return(as.numeric(100*s))
}
w0 <- rep(0,d)
w1 <- rep(0,d)
b0 <- 0
cpc <- 1
CostFunc_Sery    <- rep(0,2000)
CostFunc_Sery[1] <- Costfunc(w0,b0)
L_speed <- 0.0000003
err  <- 0.25
k <- 1
tstart <- Sys.time()
while (cpc>=err){
for (j in 1:d)
w1[j] <- w0[j] - L_speed * Costfunc_dwj(w0,b0,j)
b1 <- b0 - L_speed * Costfunc_db(w0,b0)
k <- k+1
CostFunc_Sery[k] <- Costfunc(w1,b1)
cpc <- abs(CostFunc_Sery[k-1]-CostFunc_Sery[k])*100/CostFunc_Sery[k-1]
w0 <- w1; b0 <- b1
}
plot(x1, y1, lty=1, type='l',
xlab="iteration times", ylab="f(w,b)",
main="Different grandient descent method",
xlim=c(0,1000), ylim=c(230000,600000))
x1=0:(T1-1); y1=CostFunc_Sery[1:T1];
x2=0:(T2-1); y2=CostFunc_Sery2[1:T2];
x3=0:(T3-1); y3=CostFunc_Sery3[1:T3];
plot(x1, y1, lty=1, type='l',
xlab="iteration times", ylab="f(w,b)",
main="Different grandient descent method",
xlim=c(0,1000), ylim=c(230000,600000))
points(x2, y2, type='l', lty=2)
points(x3, y3, type='l', lty=3)
legend("topright",legend=c("Batch grandient descent","Stochastic grandient descent","Mini batch grandient descent"), lty=1:3)
plot(x1, y1, lty=1, type='l',
xlab="iteration times", ylab="f(w,b)",
main="Different grandient descent method",
xlim=c(0,1000), ylim=c(230000,600000))
points(x2, y2, type='l', lty=2)
points(x3, y3, type='l', lty=3)
legend("topright",legend=c("Batch grandient descent","Stochastic grandient descent","Mini batch grandient descent"), lty=1:3)
plot(x1, y1, lty=1, type='l',
xlab="iteration times", ylab="f(w,b)",
main="Different grandient descent method",
xlim=c(0,1000), ylim=c(230000,600000))
points(x2, y2, type='l', lty=4)
points(x3, y3, type='l', lty=4)
legend("topright",legend=c("Batch grandient descent","Stochastic grandient descent","Mini batch grandient descent"), lty=1:3)
legend("topright",legend=c("Batch grandient descent","Stochastic grandient descent","Mini batch grandient descent"), lty=1:3)
plot(x1, y1, lty=1, type='l',
xlab="iteration times", ylab="f(w,b)",
main="Different grandient descent method",
xlim=c(0,1000), ylim=c(230000,600000))
points(x2, y2, type='l', lty=4)
points(x3, y3, type='l', lty=4)
points(x2, y2, type='l', lty=4)
points(x3, y3, type='l', lty=5)
plot(x1, y1, lty=1, type='l',
xlab="iteration times", ylab="f(w,b)",
main="Different grandient descent method",
xlim=c(0,1000), ylim=c(230000,600000))
points(x2, y2, type='o', lty=2)
plot(x1, y1, lty=1, type='l',
xlab="iteration times", ylab="f(w,b)",
main="Comparison of different grandient descent",
xlim=c(0,1000), ylim=c(230000,600000))
plot(x1, y1, lty=1, type='l',
xlab="iteration times", ylab="f(w,b)",
main="Comparison",
xlim=c(0,1000), ylim=c(230000,600000))
points(x2, y2, type='l', lty=2)
points(x3, y3, type='l', lty=3)
legend("topright",legend=c("Batch grandient descent","Stochastic grandient descent","Mini batch grandient descent"), lty=1:3)
