training_y = rep(c(3,5,8),c(nrow(train_3),nrow(train_5),nrow(train_8)))
test_data = as.matrix(read.table("zip_test.txt",head = F))
test_y = test_data[,1]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
library(MASS)
l = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(l)$class !=training_y)/length(training_y)
train_3 <- read.table("train_3.txt",sep=",",head = F)
train_5 <- read.table("train_5.txt",sep=",",head = F)
train_8 <- read.table("train_8.txt",sep=",", head = F)
training_x = rbind(as.matrix(train_3),as.matrix(train_5),as.matrix(train_8))
training_y = rep(c(3,5,8),c(nrow(train_3),nrow(train_5),nrow(train_8)))
test_data = as.matrix(read.table("zip_test.txt",head = F))
test_y = test_data[,1]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
library(MASS)
l = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(l)$class !=training_y)/length(training_y)
pred_errors[1,1] = sum(predict(l)$class !=training_y)/length(training_y)
l = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(l)$class !=training_y)/length(training_y)
sum(predict(l)$class !=training_y)/length(training_y)
sum( predict(l,test_x)$class != test_y) / length(test_y)
pred_errors[1,2] = sum( predict(l,test_x)$class != test_y) / length(test_y)
test_data = as.matrix(read.table("zip_test.txt",head = F))
test_y = test_data[,1]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
pred_errors= matrix(0,nrow = 5, ncol = 2)
l = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(l)$class !=training_y)/length(training_y)
pred_errors[1,2] = sum( predict(l,test_x)$class != test_y) / length(test_y)
pred_errors[1,2]
m1 = lda(training_x,training_y)
m1 = lda(training_x,training_y)
m1 = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y)
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y)
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
m1 = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
sum( predict(m1,test_x)$class != test_y)
predict(m1,test_x)$class
predict(m1,test_x)$class != test_y
sum( predict(m1,test_x)$class != test_y)
sum( predict(m1,test_x)$class != test_y) / length(test_y)
m1 = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
library(MASS)
train_3 <- read.table("~/Desktop/2017 spring/GR5241/HW/hw2/train_3.txt")
train_4 <- read.table("~/Desktop/2017 spring/GR5241/HW/hw2/train_4.txt")
train_5 <- read.table("~/Desktop/2017 spring/GR5241/HW/hw2/train_5.txt")
training_x = rbind(as.matrix(train_3),as.matrix(train_5),as.matrix(train_8))
training_y = rep(c(3,5,8),c(nrow(train_3),nrow(train_5),nrow(train_8)))t
test_data = as.matrix(read.table("zip_test.txt",head = F))
test_y = test_data[,1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
pred_errors= matrix(0,nrow = 5, ncol = 2)
library(MASS)
m1 = lda(training_x,training_y)
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
test_data = as.matrix(read.table("zip_test.txt",head = F))
test_y = test_data[,1]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
pred_errors= matrix(0,nrow = 5, ncol = 2)
m1 = lda(training_x,training_y)
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
library(MASS)
train_3 <- read.table("~/Desktop/2017 spring/GR5241/HW/hw2/train_3.txt")
train_4 <- read.table("~/Desktop/2017 spring/GR5241/HW/hw2/train_4.txt")
train_5 <- read.table("~/Desktop/2017 spring/GR5241/HW/hw2/train_5.txt")
training_x = rbind(as.matrix(train_3),as.matrix(train_5),as.matrix(train_8))
training_y = rep(c(3,5,8),c(nrow(train_3),nrow(train_5),nrow(train_8)))t
test_data = as.matrix(read.table("zip_test.txt",head = F))
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
test_y = test_data[,1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
pred_errors= matrix(0,nrow = 5, ncol = 2)
library(MASS)
m1 = lda(training_x,training_y)
m1 = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y) ;pred_errors[1,1]
m1 = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
test_y = test_data[,1]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
pred_errors= matrix(0,nrow = 5, ncol = 2)
library(MASS)
m1 = lda(training_x,training_y)
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
?lda
train_x_center = apply(training_x,2,mean);
xxtrain = scale ( training_x , center = train_x_center  , scale=F)
train_xx = scale ( training_x , center = train_x_center  , scale=F)
test_xx = scale ( test_x , center = train_x_center, scale=F)
V = svd(train_xx)$v[ ,1:64]
pc = svd(train_xx)$v[ ,1:64]
pcstrain = xxtrain %*% pc
pcstrain
pcstest = xxtest %*% V
pcstest = test_xx%*% V
l=lda (pcstrain , training_y)
pctrain = train_xx %*% pc
pctest = test_xx%*% V
m2=lda (pcstrain , training_y)
pred_errors [2 ,1] = sum(predict(m2)$class !=training_y)/length(training_y)
pred_errors [2 ,1]
pred_errors[2,2] = sum(predict(l,pcstest)$class!=test_y)/length(test_y)
pred_errors[2,2] = sum(predict(m2,pctest)$class!=test_y)/length(test_y);pred_errors[2,2]
pc = svd(train_xx)$v[ ,1:32]
pctrain = train_xx %*% V
pctest = test_xx %*% V
m3=lda (pctrain , training_y)
pred_errors [3 ,1] = sum(predict(m3)$class !=training_y)/length(training_y);pred_errors [3 ,1]
pred_errors[3,2] = sum(predict(m3,pcstest)$class!=test_y)/length(test_y);pred_errors[3,2]
filter = rep(1:2,8)
x = x[filter==1,]+x[filter==2,]
filterdigit = function(x){
x = matrix(x,16,16)
filter = rep(1:2,8)
x = x[filter==1,]+x[filter==2,]
x = x[,filter==1]+x [,filter==2]
as.vector(x)/4
}
xtrain = t(apply(training_x,1,filterdigit))
xtest = t(apply(test_x,1,filterdigit))
m3 = lda(xtrain,training_y)
pred_errors[3,1] = sum(predict(l)$class!=training_y)/length(training_y)
pred_errors[3,2] = sum(predict(l,xtest)$class!=test_y)/length(test_y)
pred_errors[3,1] = sum(predict(l)$class!=training_y)/length(training_y);pred_errors[3,1]
pred_errors[3,2] = sum(predict(l,xtest)$class!=test_y)/length(test_y);pred_errors[3,2]
library (glmnet)
l = glmnet(training_x ,factor(training_y),family="multinomial")
m4 = glmnet(training_x ,factor(training_y),family="multinomial")
pred_errors[4,1] = sum(as.numeric(predict(l,training_x,s=l$lambda[99],type="class"))!=
training_y)/length(training_y)
pred_errors[4,1] = sum(as.numeric(predict(l,training_x,s=l$lambda[99],type="class"))!=
training_y)/length(training_y);pred_errors[4,1]
pred_errors[4,2] = sum(as.numeric(predict(l,test_x,s=l$lambda[99],type="class"))!=
test_y)/length(test_y);pred_errors[4,2]
filterdata = function(x){
x = matrix(x,16,16)
filter = rep(1:2,8)
x = x[filter==1,]+x[filter==2,]
x = x[,filter==1]+x [,filter==2]
as.vector(x)/4
}
xtrain = t(apply(training_x,1,filterdata))
xtest = t(apply(test_x,1,filterdata))
m3 = lda(xtrain,training_y)
pred_errors[3,1] = sum(predict(l)$class!=training_y)/length(training_y);pred_errors[3,1]
pred_errors[3,2] = sum(predict(l,xtest)$class!=test_y)/length(test_y);pred_errors[3,2]
pred_errors[3,1] = sum(predict(l)$class!=training_y)/length(training_y);pred_errors[3,1]
filterdata = function(x){
x = matrix(x,16,16)
filter = rep(1:2,8)
x = x[filter==1,]+x[filter==2,]
x = x[,filter==1]+x [,filter==2]
as.vector(x)/4
}
xtrain = t(apply(training_x,1,filterdata))
xtest = t(apply(test_x,1,filterdata))
m3 = lda(xtrain,training_y)
pred_errors[3,1] = sum(predict(l)$class!=training_y)/length(training_y);pred_errors[3,1]
pred_errors[3,1] = sum(predict(m3)$class!=training_y)/length(training_y);pred_errors[3,1]
pred_errors[3,2] = sum(predict(m3,xtest)$class!=test_y)/length(test_y);pred_errors[3,2]
library (glmnet)
m4 = glmnet(training_x ,factor(training_y),family="multinomial")
m4 = glmnet(training_x ,factor(training_y),family="multinomial")
pred_errors[4,1] = sum(as.numeric(predict(l,training_x,s=l$lambda[99],type="class"))!=
training_y)/length(training_y);pred_errors[4,1]
pred_errors[4,1] = sum(as.numeric(predict(l,training_x,s=l$lambda[99],type="class"))!=
training_y)/length(training_y);pred_errors[4,1]
pred_errors[4,2] = sum(as.numeric(predict(l,test_x,s=l$lambda[99],type="class"))!=
test_y)/length(test_y);pred_errors[4,2]
print(pred_errors)
pred_errors[4,2] = sum(as.numeric(predict(l,test_x,s=l$lambda[99],type="class"))!=
test_y)/length(test_y);pred_errors[4,2]
print(pred_errors)
pred_errors= matrix(0,nrow = 4, ncol = 2)
print(pred_errors)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
library(MASS)
train_3 <- read.table("~/Desktop/2017 spring/GR5241/HW/hw2/train_3.txt")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
library(MASS)
train_3 <- read.table("~/Desktop/2017 spring/GR5241/HW/hw2/train_3.txt")
train_4 <- read.table("~/Desktop/2017 spring/GR5241/HW/hw2/train_4.txt")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
library(MASS)
train_3 <- read.table("~/Desktop/2017 spring/GR5241/HW/hw2/train_3.txt")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
train_3 <- read.table("~/Desktop/2017 spring/GR5241/HW/hw2/train_3.txt")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
pred_errors[3,1] = sum(predict(m3)$class!=training_y)/length(training_y);pred_errors[3,1]
train_x_center = apply(training_x,2,mean)
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
library(MASS)
train_3 <- read.table("train_3.txt",sep=",",head = F)
train_5 <- read.table("train_5.txt",sep=",",head = F)
train_8 <- read.table("train_8.txt",sep=",", head = F)
training_x = rbind(as.matrix(train_3),as.matrix(train_5),as.matrix(train_8))
training_y = rep(c(3,5,8),c(nrow(train_3),nrow(train_5),nrow(train_8)))
test_data = as.matrix(read.table("zip_test.txt",head = F))
test_y = test_data[,1]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
pred_errors= matrix(0,nrow = 4, ncol = 2)
library(MASS)
m1 = lda(training_x,training_y)
m1 = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
```{r, warning= False}
train_x_center = apply(training_x,2,mean)
train_x_center = apply(training_x,2,mean)
train_xx = scale ( training_x , center = train_x_center  , scale=F)
test_xx = scale ( test_x , center = train_x_center, scale=F)
pc = svd(train_xx)$v[ ,1:64]
m2=lda (pcstrain , training_y)
pred_errors[2,2] = sum(predict(m2,pctest)$class!=test_y)/length(test_y);pred_errors[2,2]
train_x_center = apply(training_x,2,mean)
train_xx = scale ( training_x , center = train_x_center  , scale=F)
test_xx = scale ( test_x , center = train_x_center, scale=F)
pc = svd(train_xx)$v[ ,1:64]
pctrain = train_xx %*% pc
pctest = test_xx%*% V
m2=lda (pcstrain , training_y)
pred_errors [2 ,1] = sum(predict(m2)$class !=training_y)/length(training_y) ; pred_errors [2 ,1]
pred_errors[2,2] = sum(predict(m2,pctest)$class!=test_y)/length(test_y);pred_errors[2,2]
train_x_center = apply(training_x,2,mean)
train_xx = scale ( training_x , center = train_x_center  , scale=F)
test_xx = scale ( test_x , center = train_x_center, scale=F)
pc = svd(train_xx)$v[ ,1:64]
pctest = test_xx%*% V
m2=lda (pcstrain , training_y)
pred_errors [2 ,1] = sum(predict(m2)$class !=training_y)/length(training_y) ; pred_errors [2 ,1]
pred_errors[2,2] = sum(predict(m2,pctest)$class!=test_y)/length(test_y);pred_errors[2,2]
filterdata = function(x){
x = matrix(x,16,16)
filter = rep(1:2,8)
x = x[filter==1,]+x[filter==2,]
x = x[,filter==1]+x [,filter==2]
as.vector(x)/4
}
xtrain = t(apply(training_x,1,filterdata))
xtest = t(apply(test_x,1,filterdata))
m3 = lda(xtrain,training_y)
pred_errors[3,1] = sum(predict(m3)$class!=training_y)/length(training_y);pred_errors[3,1]
pred_errors[3,2] = sum(predict(m3,xtest)$class!=test_y)/length(test_y);pred_errors[3,2]
library (glmnet)
m4 = glmnet(training_x ,factor(training_y),family="multinomial")
m4 = glmnet(training_x ,factor(training_y),family="multinomial")
pred_errors[4,1] = sum(as.numeric(predict(l,training_x,s=l$lambda[99],type="class"))!=
training_y)/length(training_y);pred_errors[4,1]
pred_errors[4,2] = sum(as.numeric(predict(l,test_x,s=l$lambda[99],type="class"))!=
test_y)/length(test_y);pred_errors[4,2]
pred_errors[4,2] = sum(as.numeric(predict(l,test_x,s=l$lambda[99],type="class"))!=
test_y)/length(test_y);pred_errors[4,2]
print(pred_errors)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
library(MASS)
train_3 <- read.table("train_3.txt",sep=",",head = F)
train_5 <- read.table("train_5.txt",sep=",",head = F)
train_8 <- read.table("train_8.txt",sep=",", head = F)
#making the matrix of of training data
training_x = rbind(as.matrix(train_3),as.matrix(train_5),as.matrix(train_8))
training_y = rep(c(3,5,8),c(nrow(train_3),nrow(train_5),nrow(train_8)))
test_data = as.matrix(read.table("zip_test.txt",head = F))
#making the test data, y is the first column of the test data
test_y = test_data[,1]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
pred_errors= matrix(0,nrow = 4, ncol = 2)
library(MASS)
m1 = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
train_x_center = apply(training_x,2,mean)
train_xx = scale ( training_x , center = train_x_center  , scale=F)
test_xx = scale ( test_x , center = train_x_center, scale=F)
pc = svd(train_xx)$v[ ,1:64]
pctrain = train_xx %*% pc
pctest = test_xx%*% V
m2=lda (pcstrain , training_y)
pred_errors [2 ,1] = sum(predict(m2)$class !=training_y)/length(training_y) ; pred_errors [2 ,1]
pred_errors[2,2] = sum(predict(m2,pctest)$class!=test_y)/length(test_y);pred_errors[2,2]
filterdata = function(x){
x = matrix(x,16,16)
filter = rep(1:2,8)
x = x[filter==1,]+x[filter==2,]
x = x[,filter==1]+x [,filter==2]
as.vector(x)/4
}
xtrain = t(apply(training_x,1,filterdata))
xtest = t(apply(test_x,1,filterdata))
m3 = lda(xtrain,training_y)
pred_errors[3,1] = sum(predict(m3)$class!=training_y)/length(training_y);pred_errors[3,1]
pred_errors[3,2] = sum(predict(m3,xtest)$class!=test_y)/length(test_y);pred_errors[3,2]
library (glmnet)
m4 = glmnet(training_x ,factor(training_y),family="multinomial")
pred_errors[4,1] = sum(as.numeric(predict(l,training_x,s=l$lambda[99],type="class"))!=
training_y)/length(training_y);pred_errors[4,1]
pred_errors[4,2] = sum(as.numeric(predict(l,test_x,s=l$lambda[99],type="class"))!=
test_y)/length(test_y);pred_errors[4,2]
print(pred_errors)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
library(MASS)
train_3 <- read.table("train_3.txt",sep=",",head = F)
train_5 <- read.table("train_5.txt",sep=",",head = F)
train_8 <- read.table("train_8.txt",sep=",", head = F)
#making the matrix of of training data
training_x = rbind(as.matrix(train_3),as.matrix(train_5),as.matrix(train_8))
training_y = rep(c(3,5,8),c(nrow(train_3),nrow(train_5),nrow(train_8)))
test_data = as.matrix(read.table("zip_test.txt",head = F))
#making the test data, y is the first column of the test data
test_y = test_data[,1]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
pred_errors= matrix(0,nrow = 4, ncol = 2)
library(MASS)
m1 = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(m1)$class !=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
train_x_center = apply(training_x,2,mean)
train_xx = scale ( training_x , center = train_x_center  , scale=F)
test_xx = scale ( test_x , center = train_x_center, scale=F)
pc = svd(train_xx)$v[ ,1:64]
pctrain = train_xx %*% pc
pctest = test_xx%*% V
m2=lda (pcstrain , training_y)
pred_errors [2 ,1] = sum(predict(m2)$class !=training_y)/length(training_y) ; pred_errors [2 ,1]
pred_errors[2,2] = sum(predict(m2,pctest)$class!=test_y)/length(test_y);pred_errors[2,2]
filterdata = function(x){
x = matrix(x,16,16)
filter = rep(1:2,8)
x = x[filter==1,]+x[filter==2,]
x = x[,filter==1]+x [,filter==2]
as.vector(x)/4
}
xtrain = t(apply(training_x,1,filterdata))
xtest = t(apply(test_x,1,filterdata))
m3 = lda(xtrain,training_y)
pred_errors[3,1] = sum(predict(m3)$class!=training_y)/length(training_y);pred_errors[3,1]
pred_errors[3,2] = sum(predict(m3,xtest)$class!=test_y)/length(test_y);pred_errors[3,2]
library (glmnet)
m4 = glmnet(training_x ,factor(training_y),family="multinomial")
pred_errors[4,1] = sum(as.numeric(predict(l,training_x,s=l$lambda[99],type="class"))!=
training_y)/length(training_y);pred_errors[4,1]
pred_errors[4,2] = sum(as.numeric(predict(l,test_x,s=l$lambda[99],type="class"))!=
test_y)/length(test_y);pred_errors[4,2]
print(pred_errors)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
library(MASS)
train_3 <- read.table("train_3.txt",sep=",",head = F)
train_5 <- read.table("train_5.txt",sep=",",head = F)
train_8 <- read.table("train_8.txt",sep=",", head = F)
#making the matrix of of training data
training_x = rbind(as.matrix(train_3),as.matrix(train_5),as.matrix(train_8))
training_y = rep(c(3,5,8),c(nrow(train_3),nrow(train_5),nrow(train_8)))
test_data = as.matrix(read.table("zip_test.txt",head = F))
#making the test data, y is the first column of the test data
test_y = test_data[,1]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
pred_errors= matrix(0,nrow = 4, ncol = 2)
library(MASS)
m1 = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(m1)$class!=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
train_x_center = apply(training_x,2,mean)
train_xx = scale ( training_x , center = train_x_center  , scale=F)
test_xx = scale ( test_x , center = train_x_center, scale=F)
pc = svd(train_xx)$v[ ,1:64]
pctrain = train_xx %*% pc
pctest = test_xx%*% V
m2=lda (pcstrain , training_y)
pred_errors [2 ,1] = sum(predict(m2)$class !=training_y)/length(training_y) ; pred_errors [2 ,1]
pred_errors[2,2] = sum(predict(m2,pctest)$class!=test_y)/length(test_y);pred_errors[2,2]
filterdata = function(x){
x = matrix(x,16,16)
filter = rep(1:2,8)
x = x[filter==1,]+x[filter==2,]
x = x[,filter==1]+x [,filter==2]
as.vector(x)/4
}
xtrain = t(apply(training_x,1,filterdata))
xtest = t(apply(test_x,1,filterdata))
m3 = lda(xtrain,training_y)
pred_errors[3,1] = sum(predict(m3)$class!=training_y)/length(training_y);pred_errors[3,1]
pred_errors[3,2] = sum(predict(m3,xtest)$class!=test_y)/length(test_y);pred_errors[3,2]
library (glmnet)
m4 = glmnet(training_x ,factor(training_y),family="multinomial")
pred_errors[4,1] = sum(as.numeric(predict(l,training_x,s=l$lambda[99],type="class"))!=
training_y)/length(training_y);pred_errors[4,1]
pred_errors[4,2] = sum(as.numeric(predict(l,test_x,s=l$lambda[99],type="class"))!=
test_y)/length(test_y);pred_errors[4,2]
print(pred_errors)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
library(MASS)
train_3 <- read.table("train_3.txt",sep=",",head = F)
train_5 <- read.table("train_5.txt",sep=",",head = F)
train_8 <- read.table("train_8.txt",sep=",", head = F)
#making the matrix of of training data
training_x = rbind(as.matrix(train_3),as.matrix(train_5),as.matrix(train_8))
training_y = rep(c(3,5,8),c(nrow(train_3),nrow(train_5),nrow(train_8)))
test_data = as.matrix(read.table("zip_test.txt",head = F))
#making the test data, y is the first column of the test data
test_y = test_data[,1]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
pred_errors= matrix(0,nrow = 4, ncol = 2)
library(MASS)
m1 = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(m1)$class!=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
train_x_center = apply(training_x,2,mean)
train_xx = scale ( training_x , center = train_x_center  , scale=F)
test_xx = scale ( test_x , center = train_x_center, scale=F)
pc = svd(train_xx)$v[ ,1:64]
pctrain = train_xx %*% pc
pctest = test_xx%*% pc
m2=lda (pctrain , training_y)
#pred_errors [2 ,1] = sum(predict(m2)$class !=training_y)/length(training_y) ; pred_errors [2 ,1]
#pred_errors[2,2] = sum(predict(m2,pctest)$class!=test_y)/length(test_y);pred_errors[2,2]
filterdata = function(x){
x = matrix(x,16,16)
filter = rep(1:2,8)
x = x[filter==1,]+x[filter==2,]
x = x[,filter==1]+x [,filter==2]
as.vector(x)/4
}
xtrain = t(apply(training_x,1,filterdata))
xtest = t(apply(test_x,1,filterdata))
m3 = lda(xtrain,training_y)
pred_errors[3,1] = sum(predict(m3)$class!=training_y)/length(training_y);pred_errors[3,1]
pred_errors[3,2] = sum(predict(m3,xtest)$class!=test_y)/length(test_y);pred_errors[3,2]
library (glmnet)
m4 = glmnet(training_x ,factor(training_y),family="multinomial")
pred_errors[4,1] = sum(as.numeric(predict(m4,training_x,s=m4$lambda[99],type="class"))!=
training_y)/length(training_y);pred_errors[4,1]
pred_errors[4,2] = sum(as.numeric(predict(m4,test_x,s=m4$lambda[99],type="class"))!=
test_y)/length(test_y);pred_errors[4,2]
print(pred_errors)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw2")
library(MASS)
train_3 <- read.table("train_3.txt",sep=",",head = F)
train_5 <- read.table("train_5.txt",sep=",",head = F)
train_8 <- read.table("train_8.txt",sep=",", head = F)
#making the matrix of of training data
training_x = rbind(as.matrix(train_3),as.matrix(train_5),as.matrix(train_8))
training_y = rep(c(3,5,8),c(nrow(train_3),nrow(train_5),nrow(train_8)))
test_data = as.matrix(read.table("zip_test.txt",head = F))
#making the test data, y is the first column of the test data
test_y = test_data[,1]
test_x = test_data[(test_y==3|test_y==5|test_y==8), -1]
test_y = test_y[ test_y==3 | test_y==5 | test_y==8]
pred_errors= matrix(0,nrow = 4, ncol = 2)
library(MASS)
m1 = lda(training_x,training_y)
pred_errors[1,1] = sum(predict(m1)$class!=training_y)/length(training_y) ;pred_errors[1,1]
pred_errors[1,2] = sum( predict(m1,test_x)$class != test_y) / length(test_y); pred_errors[1,2]
train_x_center = apply(training_x,2,mean)
train_xx = scale ( training_x , center = train_x_center  , scale=F)
test_xx = scale ( test_x , center = train_x_center, scale=F)
pc = svd(train_xx)$v[ ,1:64]
pctrain = train_xx %*% pc
pctest = test_xx%*% pc
m2=lda (pctrain , training_y)
pred_errors [2 ,1] = sum(predict(m2)$class !=training_y)/length(training_y) ; pred_errors [2 ,1]
pred_errors[2,2] = sum(predict(m2,pctest)$class!=test_y)/length(test_y);pred_errors[2,2]
filterdata = function(x){
x = matrix(x,16,16)
filter = rep(1:2,8)
x = x[filter==1,]+x[filter==2,]
x = x[,filter==1]+x [,filter==2]
as.vector(x)/4
}
xtrain = t(apply(training_x,1,filterdata))
xtest = t(apply(test_x,1,filterdata))
m3 = lda(xtrain,training_y)
pred_errors[3,1] = sum(predict(m3)$class!=training_y)/length(training_y);pred_errors[3,1]
pred_errors[3,2] = sum(predict(m3,xtest)$class!=test_y)/length(test_y);pred_errors[3,2]
library (glmnet)
m4 = glmnet(training_x ,factor(training_y),family="multinomial")
pred_errors[4,1] = sum(as.numeric(predict(m4,training_x,s=m4$lambda[99],type="class"))!=
training_y)/length(training_y);pred_errors[4,1]
pred_errors[4,2] = sum(as.numeric(predict(m4,test_x,s=m4$lambda[99],type="class"))!=
test_y)/length(test_y);pred_errors[4,2]
print(pred_errors)
