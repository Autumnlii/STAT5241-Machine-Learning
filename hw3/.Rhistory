prioir_svm <- tune(svm,a~., data.frame(train),cost = c(0.01,0.1,1,10) , gamma = c(0.01,0.1,1,10),
tunecontrol = tc)
prioir_svm <- tune(svm,a~., data.frame(train),kernel = "radial",
range = list(cost = c(0.01,0.1,1,10),
gamma = c(0.01,0.1,1,10)
scale = F)
prioir_svm <- tune(svm,a~., data.frame(train),kernel = "radial",
range = list(cost = c(0.01,0.1,1,10),
gamma = c(0.01,0.1,1,10),scale =F))
prioir_svm <- tune(svm,a~., data.frame(train),kernel = "radial",
range = list(cost = c(0.01,0.1,1,10),
gamma = c(0.01,0.1,1,10)),scale =F)
model.rbf = svm(a~ ., data = train,type = "C-classification",cross= 10,kernel="radial", gamma="0.002")
summary(model.rbf)
prioir_svm <- tune(svm,a~., data =train,kernel = "radial",
range = list(cost = c(0.01,0.1,1,10),
gamma = c(0.01,0.1,1,10)),scale =F)
prioir_svm <- tune(svm,a~., data = data.frame(train),kernel = "radial",
range = list(cost = c(0.01,0.1,1,10),
gamma = c(0.01,0.1,1,10)),scale =F)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
data5 = read.table("train.5.txt", sep = ",")
data6 = read.table("train.6.txt", sep = ",")
library("e1071")
data = rbind(as.matrix(data5),as.matrix(data6))
y = rep(c(-1,1),c(nrow(data5),nrow(data6)))
data = cbind(y,data)
test = data[sample(nrow(data),0.2*nrow(data)),]
train = data[sample(nrow(data),0.8*nrow(data)),]
length(test)/length(data)
length(train)/length(data)# As Category
a = as.factor(train[,1])
levels(a)
b = as.factor(test[,1])
levels(b)
colnames(test) <- c("Y", paste("X.", 1:256, sep = ""))
colnames(train) <- c("Y", paste("X.", 1:256, sep = ""))
model.c <- svm(a ~ ., data = train,type = "C-classification",cross= 10,kerne = "linear")
summary(model.c)
model.rbf = svm(a~ ., data = train,type = "C-classification",cross= 10,kernel="radial", gamma="0.002")
summary(model.rbf)
prioir_svm <- tune(svm,a~., data = data.frame(train),kernel = "radial",
range = list(cost = c(0.01,0.1,1,10),
gamma = c(0.01,0.1,1,10)),scale =F)
rioir_svm <- tune(svm,a~., data = data.frame(train),kernel = "radial",
range = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.001,0.1,1,10)),scale =F)
prioir_svm <- tune(svm,a ~ ., data = data.frame(train),kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
model.rbf = svm(a~ ., data = train,type = "C-classification",cross= 10,kernel="radial", gamma="0.002")
summary(model.rbf)
prioir_svm <- tune(svm,a ~ ., data = data.frame(train),kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
prioir_svm <- tune(svm,a~., data.frame(train),cost = c(0.01,0.1,1,10),kerne = "linear")
tunecontrol = tc)
prioir_svm <- tune(svm,a~., data.frame(train),cost = c(0.01,0.1,1,10),kerne = "linear")
prioir_svm <- tune(svm,a ~ ., data = data.frame(train),kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
length(a)
str(train)
prioir_svm <- tune(svm,a ~ ., data = train,kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
prioir_svm <- tune(svm,a ~ ., data = data.frame(train),kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
length(a)
length(train)
length(data.frame(train))
str(train)
View(train)
View(data.frame(train))
data2 = data.frame(train)
train2 = data.frame(train)
b = as.factor(train2[,1])
prioir_svm <- tune(svm,b ~ ., data = train2,kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
length(train2)
length(t(train2))
str(train2)
prioir_svm <- tune(svm,a ~ ., data = train,kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
nrow(train2)
ncol = (train2)
ncol(train2)
length(b)
prioir_svm <- tune(svm,a ~ ., data = data.frame(train),kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
a
b = rep(-1,257)
b = as.factor(rep(-1,257))
prioir_svm <- tune(svm,b ~ ., data = data.frame(train),kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
length(b)
length(train2)
prioir_svm <- tune(svm,b ~ ., data = data.frame(train),kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
obj <- tune.svm(a~., data = train, cost = c(0.001,0.01,0.1,1), gamma = c(0.01,0.1,1,10))
obj <- tune.svm(a~., data = data.frame(train), cost = c(0.001,0.01,0.1,1), gamma = c(0.01,0.1,1,10))
obj <- tune.svm(y~., data = data.frame(train), cost = c(0.001,0.01,0.1,1), gamma = c(0.01,0.1,1,10))
obj <- tune.svm(y~., data = train, cost = c(0.001,0.01,0.1,1), gamma = c(0.01,0.1,1,10))
.
obj <- tune.svm(y~., data = train, cost = c(0.001,0.01,0.1,1), gamma = c(0.01,0.1,1,10))
obj
?formula
obj <- tune.svm(a~., data = train, cost = c(0.001,0.01,0.1,1), gamma = c(0.01,0.1,1,10))
obj <- tune.svm(Y~., data = train, cost = c(0.001,0.01,0.1,1), gamma = c(0.01,0.1,1,10))
obj <- tune.svm(Y~., data = train, cost = c(0.001,0.01,0.1,1), gamma = c(0.01,0.1,1,10))
?tune.svm
obj <- tune.svm(Y~., data = train, cost = c(0.001,0.01,0.1,1), gamma = c(0.01,0.1,1,10))
data = rbind(data5, data6)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
data5 = read.table("train.5.txt", sep = ",")
data6 = read.table("train.6.txt", sep = ",")
library("e1071")
data = rbind(data5, data6)
data$y
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
data5 = read.table("train.5.txt", sep = ",")
data6 = read.table("train.6.txt", sep = ",")
library("e1071")
data = rbind(data5, data6)
y = rep(c(-1,1),c(nrow(data5),nrow(data6)))
data = cbind(y,data)
data = cbind(y,data)
data$y
tc
source('~/.active-rstudio-document', echo=TRUE)
tc
<- tune(svm,a~., data.fr
prioir_svm <- tune(svm,a~., data.frame(train),cost = c(0.01,0.1,1,10),kerne = "linear")
model.c <- svm(a ~ ., data = train,type = "C-classification",cross= 10,kerne = "linear")
model.c <- svm(a ~ ., data = train,type = "C-classification",cross= 10,kerne = "linear",scale = F)
prioir_svm <- tune(svm,a~., data.frame(train),cost = c(0.01,0.1,1,10),kerne = "linear",scale =F)
train = data[sample(nrow(data), 0.8*nrow(data)), ]
mode(train)
train
data5 = read.table("train.5.txt", sep = ",")
data6 = read.table("train.6.txt", sep = ",")
library("e1071")
data = rbind(data5, data6)
y = rep(c(-1,1),c(nrow(data5),nrow(data6)))
data = cbind(y,data)
test = data[sample(nrow(data), 0.2*nrow(data)), ]
train = data[sample(nrow(data), 0.8*nrow(data)), ]
length(test)/length(data)
length(train)/length(data)# As Category
mode(train)
mode(data)
mode(data5)
source('~/.active-rstudio-document', echo=TRUE)
prioir_svm <- tune(svm, a ~., data = data.frame(train),kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
prioir_svm <- tune(svm,a~., train, cost = c(0.01,0.1,1,10),kernel = "linear",scale =F)
prioir_svm <- tune.svm(a~., train, cost = c(0.01, 0.1, 1, 10),kernel = "linear",scale =F)
prioir_svm <- tune.svm(a~., data = train, cost = c(0.01, 0.1, 1, 10),kernel = "linear",scale =F)
names(train)
train$Y
length(train$Y)
prioir_svm <- tune.svm(a~., data = train, cost = c(0.01, 0.1, 1, 10),kernel = "linear",scale =F)
model.c <- svm(a ~ ., data = train,type = "C-classification",cross= 10,kerne = "linear",scale = F)
model.c <- svm(a ~ ., data = train,cross= 10,kerne = "linear",scale = F)
model.c <- svm(a ~ ., data = train, cross= 10,kerne = "linear",scale = F,cost = c(0.01, 0.1, 1, 10))
model.c <- svm(a ~ ., data = train, cross= 10,kerne = "linear",scale = F,cost = c(0.01, 0.1, 1, 10))
summary(model.c)
tc <- tune.control(cross = c(2,5,10))
range = c(0.01,0.1,1,10)
hahah <- c(0.01, 0.1, 1, 10)
prioir_svm <- tune.svm(a~., data = train, cost = hahah, kernel = "linear", scale = F)
length(train)
dim(train)
source('~/.active-rstudio-document', echo=TRUE)
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
prioir_svm <- tune.svm(y~., data = train, cost = hahah, kernel = "linear", scale = F)
hahah <- c(0.01, 0.1, 1, 10)
prioir_svm <- tune.svm(y~., data = train, cost = hahah, kernel = "linear", scale = F)
model_c <- tune.svm(y~., data = train, cost = hahah, kernel = "linear", scale = F)
model_c$best.model
test = data[sample(nrow(data), 0.2*nrow(data)), ]
names(test)
train = data[sample(nrow(data), 0.8*nrow(data)), ]
names(train)
names(test)
t2 = table(true = test$y,pred = predict(model_c,test))
t2 = table(true = test$y,pred = predict(m_c_fit,test))
m_c_fit = model_c$best.model
t2 = table(true = test$y,pred = predict(m_c_fit,test))
table2 = table(true = test$y,pred = predict(m_c_fit,test));table2
error = (table[1,2]+table2[2,1]/nrow(test))
table[1,2]
error = (table2[1,2]+table2[2,1]/nrow(test))
error = (table2[1,2]+table2[2,1]/nrow(test));error
table2[1,2]+table2[2,1]
table2[1,2]
(table2[1,2]+table2[2,1])
nrow(test)
(table2[1,2]+table2[2,1])/nrow(test)
error = (table2[1,2]+table2[2,1])/nrow(test);error
m1 = matrix(model_c[,3],nrow = 4,ncol = 4)
m1 = matrix(model_c$best.performance[,3],nrow = 4,ncol = 4)
m1 = matrix(model_c$best.performance[,3],nrow = 4,ncol = 4)
model_c$best.performance[,3]
matrix(model_c$best.performance[,3],nrow = 4,ncol= 4)
model_c$best.performance
m1 = matrix(model_c$performances[,3],nrow = 4, ncol = 4)
m1
plot(m1)
hahah <-
model_c <- tune.svm(y~., data = train, cost = c(0.01, 0.1, 1, 10), cross = c(2,5,10),kernel = "linear", scale = F)
hahah <-
model_c <- tune.svm(y~., data = train, cost = c(0.01, 0.1, 1, 10), cross = c(2,5,10),kernel = "linear", scale = F)
hahah <-
model_c <- tune.svm(y~., data = train, cost = c(0.01, 0.1, 1, 10), cross = 8,kernel = "linear", scale = F)
hahah <-
model_c <- tune.svm(y~., data = train, cost = c(0.01, 0.1, 1, 10), cross = c(2,5,10),kernel = "linear", scale = F)
hahah <-
model_c <- tune.svm(y~., data = train, cost = c(0.01, 0.1, 1, 10), cross = 8,kernel = "linear", scale = F)
m_c_fit = model_c$best.model
table2 = table(true = test$y,pred = predict(m_c_fit,test));table2
error = (table2[1,2]+table2[2,1])/nrow(test);error
m1 = matrix(model_c$performances[,3],nrow = 4, ncol = 4)
m1
image = (x = c(0.5,1.2.3),y = c(0.01, 0.1, 1, 10),z=m1)
image = (x = c(0.5,1,2,3),y = c(0.01, 0.1, 1, 10),z=m1)
image = (y = c(0.5,1,2,3),x = c(0.01, 0.1, 1, 10),z=m1)
image = (y = c(0.5,1,2,3),x = c(0.01, 0.1, 1, 10),z=m1)
image = (y = c(0.5,1,2,3),x = c(0.01, 0.1, 1, 10),z=m1)
image ( y= c(0.5,1,2,3),x = c(0.01, 0.1, 1, 10),z=m1)
m1 = matrix(model_c$performances[,3],nrow = 4, ncol = 4)
m1
model_rbf <- tune(svm, a ~., data = data.frame(train),kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
model_rbf <- tune(svm, y ~., data = data.frame(train),kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
,,
model_rbf <- tune(svm, y ~., data = train,kernel = "radial",
ranges  = list(cost = c(0.001,0.01,0.1,1),
gamma = c(0.01,0.1,1,10)),scale =F)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial",
ranges  = list(cost = c(0.01,0.1,1),
gamma = c(0.1,1,10)),scale =F)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial",
ranges  = list(cost = c(0.1,1),
gamma = c(1,10)),scale =F)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial",
ranges  = list(cost = c(0.1),
gamma = c(1),scale =F)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial",
ranges  = list(cost = c(0.1),
gamma = c(1)),scale =F)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial", ranges  = list(cost = c(0.1),gamma = c(1)),scale =F)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial", ranges  = list(cost = c(0.1,1),gamma = c(1,10)),scale =F)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial", ranges  = list(cost = c(0.010.1,1),gamma = c(,0.11,10)),scale =F)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial", ranges  = list(cost = c(0.01,0.1,1),gamma = c(,0.11,10)),scale =F)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial", ranges  = list(cost = c(0.01,0.1,1),gamma = c(0.1,1,10)),scale =F)
m_rbf_fit = model_rbf$best.model
table1 = table(true = test$y,pred = predict(m_c_fit,test));table1
table1 = table(true = test$y,pred = predict(m_rbf_fit,test));table1
table2 = table(true = test$y,pred = predict(m_rbf_fit,test));table2
error_2 = (table2[1,2]+table2[2,1])/nrow(test);error
m2 = matrix(model_c$performances[,3],nrow = 4, ncol = 4)
m2 = matrix(model_rbf$performances[,3],nrow = 4, ncol = 4)
m2 = matrix(model_rbf$performances[,3],nrow = 4, ncol = 4)
model_rbf$performances
model_rbf$performances[,3]
model_c$performances
model_c$performances[,2]
m1 = matrix(model_c$performances[,2],nrow = 4, ncol = 4)
image ( y= c(0.017,0.022,0.021,0.021),x = c(0.01, 0.1, 1, 10),z=m1)
image ( y= c(0.017,0.022,0.021,0.0215),x = c(0.01, 0.1, 1, 10),z=m1)
m1 = matrix(model_c$performances[,2],nrow = 4, ncol = 4)
m1
m1 = matrix(model_c$performances[,2],nrow = 2, ncol = 2)
image ( y= c(0.017,0.022,0.021,0.0215),x = c(0.01, 0.1, 1, 10),z=m1)
model_c$performances[,2]
plot(model_c$performances[,2])
model_rbf$performances
matrix(model_rbf$performances[,3],nrow = 3, ncol = 3)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial", ranges  = list(cost = c(0.001,0.01,0.1,1),gamma = c(0.01,0.1,1,10)),scale =F)
m_rbf_fit = model_rbf$best.model
table2 = table(true = test$y,pred = predict(m_rbf_fit,test));table2
error_2 = (table2[1,2]+table2[2,1])/nrow(test);error
model_rbf$performances[,3]
m2 = matrix(model_rbf$performances[,3],nrow = 4, ncol = 4)
image ( y= c(0.5,1,2,3),x = c(0.01, 0.1, 1, 10),z=m1)
image ( y= c(0.5,1,2,3),x = c(0.01, 0.1, 1, 10),z=m2)
model_c <- tune.svm(y~., data = train, gamma = c(0.01,0.1,1,10)，cost = c(0.01, 0.1, 1, 10), cross = 8,kernel = "linear", scale = F)
model_c <- tune.svm(y~., data = train, gamma = c(0.01,0.1,1,10),cost = c(0.01, 0.1, 1, 10), cross = 8,kernel = "linear", scale = F)
?svm
model_c <- tune.svm(y~., data = train,,cost = c(0.01, 0.1, 1, 10), cross = c(1,2,3,4),kernel = "linear", scale = F)
model_c <- tune.svm(y~., data = train,,cost = c(0.01, 0.1, 1, 10), cross = 4,kernel = "linear", scale = F)
model_rbf$performances[,3]
image ( y= c(0.5,1,2,3),x = c(0.01, 0.1, 1, 10),z=m2)
model_c <- tune.svm(y~., data = train,cost = c(0.01, 0.05,0.1,0.5 1,1.5,10), cross = 4,kernel = "linear", scale = F)
model_c <- tune.svm(y~., data = train,cost = c(0.01, 0.05,0.1,0.5,1,1.5,10), cross = 4,kernel = "linear", scale = F)
m_c_fit = model_c$best.model
table1 = table(true = test$y,pred = predict(m_c_fit,test));table2
error = (table1[1,2]+table1[2,1])/nrow(test);error
model_c$performances[,2]
c(0.001:1,sep = 0.005)
model_c <- tune.svm(y~., data = train,cost = c(0.001,0.003,0.005,0.007,0.01,0.03,0.05,0.07,0.1,0.3,0.5,0.7), cross = 4,kernel = "linear", scale = F)
m_c_fit = model_c$best.model
table1 = table(true = test$y,pred = predict(m_c_fit,test));table2
error = (table1[1,2]+table1[2,1])/nrow(test);error
model_c$performances[,2]
model_c <- tune.svm(y~., data = train,cost = c(0.001,0.003,0.005,0.007,0.01,0.03,0.05,0.07,0.1,0.3,0.5,0.7,1,3,5,7), cross = 4,kernel = "linear", scale = F)
model_c <- tune.svm(y~., data = train,cost = c(0.001,0.01,0.1,1), cross = 4,kernel = "linear", scale = F)
m_c_fit = model_c$best.model
table1 = table(true = test$y,pred = predict(m_c_fit,test));table2
error = (table1[1,2]+table1[2,1])/nrow(test);error
m1 = matrix(model_c$performances[,2],nrow = 2, ncol = 2)
model_c$performances[,2]
m1 = matrix(model_c$performances[,2],nrow = 1, ncol = 4)
image(x = c(0.001,0.01,0.1,1),y = c(0.01,0.02,0.03,0.04) )
image(x = c(0.001,0.01,0.1,1),y = c(0.01,0.02,0.03,0.04),z = m1 )
m1
plot(model_c$performances)
plot(model_c$performances[,2])
plot(model_c$performances[,2],xlim = =c(0.01:0.05))
?xlim
plot(model_c$performances[,2],xlim = =c(0.01))
plot(model_c$performances[,2],xlim = c(0.01))
plot(model_c$performances[,2],xlim = c(0.01:0.05))
plot(model_c$performances[,2])
m1 = matrix(model_c$performances[,2],nrow = 2, ncol = 2)
image(x = c(0.01,0.1),y = c(0.01,0.02,0.03,0.04),z = m1 )
image(x = c(0.01,0.1),y = c(0.03,0.04),z = m1 )
m1
plot(model_rbf$performances[,3])
plot(model_c$performances[,2])
image ( y= c(0.5,1,2,3),x = c(0.01, 0.1, 1, 10),z=m2)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial", ranges  = list(cost = c(0.005,0.05,0.5,1),gamma = c(0.05,0.5,1,5)),scale =F)
m_rbf_fit = model_rbf$best.model
table2 = table(true = test$y,pred = predict(m_rbf_fit,test));table2
error_2 = (table2[1,2]+table2[2,1])/nrow(test);error
m2 = matrix(model_rbf$performances[,3],nrow = 4, ncol = 4)
image ( y= c(0.5,1,2,3),x = c(0.01, 0.1, 1, 10),z=m2)
plot(model_rbf$performances[,3])
model_rbf$performances[,3]
m2 = matrix(model_rbf$performances[,3],nrow = 4, ncol = 4)
image ( y= c(0.1,0.5,1,1),x = c(0.05, 0.5, 1, 5),z=m2)
image ( y= c(0.1,0.5,1,2),x = c(0.05, 0.5, 1, 5),z=m2)
plot(model_rbf$performances[,3])
image ( y= c(0.1,0.5,1,2),x = c(0.05, 0.5, 1, 5),z=m2)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial", ranges  = list(cost = c(0.005,0.05,0.5),gamma = c(0.05,0.5,5)),scale =F)
m_rbf_fit = model_rbf$best.model
table2 = table(true = test$y,pred = predict(m_rbf_fit,test));table2
error_2 = (table2[1,2]+table2[2,1])/nrow(test);error
m2 = matrix(model_rbf$performances[,3],nrow = 4, ncol = 4)
m2 = matrix(model_rbf$performances[,3],nrow = 3, ncol = 3)
model_rbf$performances[,3]
image ( y= c(0.1,0.5,1),x = c(0.05, 0.5,0，5),z=m2)
image ( y= c(0.1,0.5,1),x = c(0.05, 0.5,0，5),z=m2)
image ( y= c(0.1,0.5,1),x = c(0.05, 0.5,0.5),z=m2)
m2 = matrix(model_rbf$performances[,3],nrow = 3, ncol = 3)
image ( y= c(0.1,0.5,1),x = c(0.05, 0.5,0.5),z=m2)
image ( y= c(0.1,0.5,1),x = c(0.05, 0.5,5),z=m2)
model_c <- tune.svm(y~., data = train,cost = c(0.001,0.01,0.1,1), cross = 4,kernel = "linear", scale = F)
model_c <- tune.svm(y~., data = train,cost = c(0.001,0.01,0.1,1), cross = 4,kernel = "linear", scale = F
pdf(width = 7,height = 7, file = paste(base_loc,"3.1 problem",sep = "")))
m_c_fit = model_c$best.model
pdf(width = 7,height = 7, file = paste(base_loc,"3.1 problem",sep = ""))
plot(model_c,type = "contour")
plot(model_rbf,type = "contour")
m_rbf_fit = model_rbf$best.model
table2 = table(true = test$y,pred = predict(m_rbf_fit,test));table2
error_2 = (table2[1,2]+table2[2,1])/nrow(test);error
model_c <- tune.svm(y~., data = train,cost = c(0.001,0.01,0.1,1), cross = 4,kernel = "linear", scale = F)
plot(model_c,type = "contour"，main = "Tuning on different cost level Linear kernel ")
plot(model_c,type = "contour"，main = "Tuning on different cost level Linear kernel ")
plot(model_c,type = "contour",main = "Tuning on different cost level Linear kernel ")
plot(model_rbf,type = "contour",main = "Tuning on different cost on gamma")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
train5 = read.table("train.5.txt", sep = ",")
train6<- read.table(paste(file_loction ,"train.5.txt",sep=""), header=FALSE, sep=",")
train5 = read.table("train.5.txt", sep = ",")
train6 = read.table("train.6.txt", sep = ",")
library(e1071)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
train5 = read.table("train.5.txt", sep = ",")
train6 = read.table("train.6.txt", sep = ",")
probability <- 0.2
number_t5 <- dim(train5)[1]
number_t6 <- dim(train6)[1]
number_t5.2 <- dim(train5)[2]
index_number_1 <- sample(number_t5 , round(probability* number_t5) , replace = F)
index_number_2 <- sample(number_t6 , round(probability * number_t6) , replace = F)
x_training <- rbind(train5[-index_number_1, ],train6[-index_number_2, ])
y_training <- factor(c(rep("5", number_t5 - length(index_number_1)), rep("6", number_t6 - length(index_number_2))))
x_test <- rbind(train5[index_number_1, ],train6[index_number_2, ] )
y_test <- factor(c(rep("5", length(index_number_1)), rep("6",  length(index_number_2))))
linear.svm <- tune.svm(x = x_training , y = y_training , cost = seq(0.001,0.06,0.002) , kernel = "linear")
library("e1071")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
data5 = read.table("train.5.txt", sep = ",")
library(e1071)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
train5 = read.table("train.5.txt", sep = ",")
train6 = read.table("train.6.txt", sep = ",")
probability <- 0.2
number_t5 <- dim(train5)[1]
number_t6 <- dim(train6)[1]
number_t5.2 <- dim(train5)[2]
index_number_1 <- sample(number_t5 , round(probability* number_t5) , replace = F)
index_number_2 <- sample(number_t6 , round(probability * number_t6) , replace = F)
x_training <- rbind(train5[-index_number_1, ],train6[-index_number_2, ])
y_training <- factor(c(rep("5", number_t5 - length(index_number_1)), rep("6", number_t6 - length(index_number_2))))
x_test <- rbind(train5[index_number_1, ],train6[index_number_2, ] )
y_test <- factor(c(rep("5", length(index_number_1)), rep("6",  length(index_number_2))))
linear.svm <- tune.svm(x = x_training , y = y_training , cost = seq(0.001,0.06,0.002) , kernel = "linear")
plot(linear.svm , main = "Linear SVM")
print(linear.svm)
radial.svm <- tune(svm, y ~., train.x ＝ x_training, train.y = y_training ,kernel = "radial", ranges  = list(cost = c(0.005,0.05,0.5),gamma = c(0.05,0.5,5)),scale = F)
radial.svm <- tune(svm, y ~., train.x ＝ x_training, train.y = y_training ,kernel = "radial", ranges  = list(cost = c(0.005,0.05,0.5),gamma = c(0.05,0.5,5)),scale = F)
radial.svm <- tune(svm, train.x ＝ x_training, train.y = y_training ,kernel = "radial", ranges  = list(cost = c(0.005,0.05,0.5),gamma = c(0.05,0.5,5)),scale = F)
radial.svm <- tune(svm, x ＝ x_training,y = y_training ,kernel = "radial", ranges  = list(cost = c(0.005,0.05,0.5),gamma = c(0.05,0.5,5)),scale = F)
radial.svm <- tune(svm, x_training,y_training ,kernel = "radial", ranges  = list(cost = c(0.005,0.05,0.5),gamma = c(0.05,0.5,5)),scale = F)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
data5 = read.table("train.5.txt", sep = ",")
data5$y <- rep(1, nrow(data5))
data6 = read.table("train.6.txt", sep = ",")
data6$y <- rep(-1, nrow(data6))
data = rbind(data5, data6)
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
data5 = read.table("train.5.txt", sep = ",")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
data5 = read.table("train.5.txt", sep = ",")
data5$y <- rep(1, nrow(data5))
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
data5 = read.table("train.5.txt", sep = ",")
data5$y <- rep(1, nrow(data5))
data6 = read.table("train.6.txt", sep = ",")
data6$y <- rep(-1, nrow(data6))
data = rbind(data5, data6)
data$y <- factor(data$y)
test = data[sample(nrow(data), 0.2*nrow(data)), ]
train = data[sample(nrow(data), 0.8*nrow(data)), ]
model_c <- tune.svm(y~., data = train,cost = c(0.001,0.01,0.1,1), cross = ,10kernel = "linear", scale = F)
pdf(width = 7,height = 7, file = paste(base_loc,"3.1 problem",sep = ""))
model_c <- tune.svm(y~., data = train,cost = c(0.001,0.01,0.1,1), cross = ,10kernel = "linear", scale = F)
model_c <- tune.svm(y~., data = train,cost = c(0.001,0.01,0.1,1), cross = 10，kernel = "linear", scale = F)
m_c_fit = model_c$best.model
model_c <- tune.svm(y~., data = train,cost = c(0.001,0.01,0.1,1), cross = 10,kernel = "linear", scale = F)
plot(model_c,type = "contour",main = "Tuning on different cost level Linear kernel ")
model_c <- tune.svm(y~., data = train,cost = seq(0.001,0.01,0.1,1), cross = 10,kernel = "linear", scale = F)
model_c <- tune.svm(y~., data = train,cost = seq(0.001,0.01,0.1), cross = 10,kernel = "linear", scale = F)
m_c_fit = model_c$best.model
plot(model_c,type = "contour",main = "Tuning on different cost level Linear kernel ")
plot(model_c,,main = "Tuning on different cost level Linear kernel ")
table1 = table(true = test$y,pred = predict(m_c_fit,test));table2
plot(model_c,,main = "Tuning on different cost level Linear kernel ")
m_c_fit = model_c$best.model
plot(model_c,,main = "Tuning on different cost level Linear kernel ")
plot(model_c,,main = "Tuning on different cost level Linear kernel ")
model_c <- tune.svm(y~., data = train,cost = seq(0.001,0.06,0.002), cross = 10,kernel = "linear", scale = F)
library("e1071")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
data5 = read.table("train.5.txt", sep = ",")
data5$y <- rep(1, nrow(data5))
data6 = read.table("train.6.txt", sep = ",")
data6$y <- rep(-1, nrow(data6))
data = rbind(data5, data6)
data$y <- factor(data$y)
test = data[sample(nrow(data), 0.2*nrow(data)), ]
train = data[sample(nrow(data), 0.8*nrow(data)), ]
library("e1071")
setwd("~/Desktop/2017 spring/GR 5241/HW/hw3")
data5 = read.table("train.5.txt", sep = ",")
data5$y <- rep(1, nrow(data5))
data6 = read.table("train.6.txt", sep = ",")
data6$y <- rep(-1, nrow(data6))
data = rbind(data5, data6)
data$y <- factor(data$y)
test = data[sample(nrow(data), 0.2*nrow(data)), ]
train = data[sample(nrow(data), 0.8*nrow(data)), ]
model_c <- tune.svm(y~., data = train,cost = seq(0.001,0.06,0.002), cross = 10,kernel = "linear", scale = F)
model_c <- tune.svm(y~., data = train,cost = c(0.001,0.01,0.1,1), cross = 10,kernel = "linear", scale = F)
m_c_fit = model_c$best.model
plot(model_c,,main = "Tuning on different cost level Linear kernel ")
model_c <- tune.svm(y~., data = train,cost = sqe(0.001,0.01,0.1),kernel = "linear", scale = F)
model_c <- tune.svm(y~., data = train,cost = seq(0.001,0.01,0.1),kernel = "linear", scale = F)
m_c_fit = model_c$best.model
plot(model_c,,main = "Tuning on different cost level Linear kernel ")
model_c <- tune.svm(y~., data = train,cost = seq(0.001,0.06,0.002),kernel = "linear", scale = F)
m_c_fit = model_c$best.model
plot(model_c,,main = "Tuning on different cost level Linear kernel ")
table1 = table(true = test$y,pred = predict(m_c_fit,test));table2
table1 = table(true = test$y,pred = predict(m_c_fit,test));table1
error = (table1[1,2]+table1[2,1])/nrow(test);error
radial.svm <- tune(svm, x_training,y_training ,kernel = "radial", ranges  = list(cost = seq(1,5,1),gamma = sqe(0.005,0.05,0.005)),scale = F)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial", ranges  = list(cost = seq(1,5,1),gamma = sqe(0.005,0.05,0.005)),scale =F)
model_rbf <- tune(svm, y ~., data = train,kernel = "radial", ranges  = list(cost = seq(1,5,1),gamma = seq(0.005,0.05,0.005)),scale =F)
plot(model_rbf,type = "contour",main = "Tuning on different cost on gamma")
m_rbf_fit = model_rbf$best.model
table2 = table(true = test$y,pred = predict(m_rbf_fit,test));table2
error_2 = (table2[1,2]+table2[2,1])/nrow(test);error
print(model_c)
print(model_rbf)
